from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states import ArticleStates
from keyboards import main_menu_keyboard
from api_client import ingest, summarize, ask, summarize_async, ingest_async, ask_async, get_task_result

import asyncio

router = Router()

@router.message(F.text.lower() == "/start")
async def start_handler(msg: Message, state: FSMContext):
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—É—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é–∑—â—É—é —Ç–µ–±—è —Å—Ç–∞—Ç—å—é —Å arXiv.org. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await state.set_state(ArticleStates.choosing_action)

@router.message(F.text.lower() == "‚¨áÔ∏è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é")
async def ingest_prompt(msg: Message, state: FSMContext):
    await msg.answer("üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é —Å arXiv:")
    await state.set_state(ArticleStates.entering_url)

@router.message(ArticleStates.entering_url)
async def ingest_article_handler(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    wait_msg = await msg.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")

    task_info = ingest_async(user_id, msg.text)
    task_id = task_info["task_id"]

    # –ü—É–ª–ª–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    while True:
        await asyncio.sleep(2)
        status_info = get_task_result(task_id)

        if status_info["status"] == "completed":
            result = status_info["result"]
            await wait_msg.delete()
            await msg.answer(f"‚úÖ {result.get('message')}")
            break
        elif status_info["status"] == "failed":
            await wait_msg.delete()
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {status_info['error']}")
            break

    await state.set_state(ArticleStates.choosing_action)


@router.message(F.text.lower() == "üìä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
async def summarize_handler(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    wait_msg = await msg.answer("üß† –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ FastAPI
    task_info = summarize_async(user_id)
    task_id = task_info["task_id"]

    # –ü—É–ª–ª–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    while True:
        await asyncio.sleep(2)
        status_info = get_task_result(task_id)

        if status_info["status"] == "completed":
            result = status_info["result"]
            await wait_msg.delete()
            await msg.answer(
                f"üåê <b>{result['title']}</b>\n\n<b>–†–µ–∑—é–º–µ:</b>\n{result['summary']}",
                parse_mode="HTML"
            )
            break
        elif status_info["status"] == "failed":
            await wait_msg.delete()
            await msg.answer(f"–û—à–∏–±–∫–∞: {status_info['error']}")
            break
            
    await state.set_state(ArticleStates.choosing_action)

@router.message(F.text.lower() == "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_prompt(msg: Message, state: FSMContext):
    await msg.answer("üìù –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∞—Ç—å–µ:")
    await state.set_state(ArticleStates.asking_question)


@router.message(ArticleStates.asking_question)
async def ask_handler(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    wait_msg = await msg.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ FastAPI
    task_info = ask_async(user_id, msg.text)
    task_id = task_info["task_id"]

    # –ü—É–ª–ª–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    while True:
        await asyncio.sleep(2)
        status_info = get_task_result(task_id)

        if status_info["status"] == "completed":
            result = status_info["result"]
            await wait_msg.delete()
            await msg.answer(
                f"üí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{result['answer']}",
                parse_mode="HTML"
            )
            break
        elif status_info["status"] == "failed":
            await wait_msg.delete()
            await msg.answer(f"–û—à–∏–±–∫–∞: {status_info['error']}")
            break

    await state.set_state(ArticleStates.choosing_action)