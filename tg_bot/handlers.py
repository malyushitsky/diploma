from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from states import ArticleStates
from keyboards import main_menu_keyboard
from api_client import ingest_article, summarize, ask
import asyncio

router = Router()

@router.message(F.text.lower() == "/start")
async def start_handler(msg: Message, state: FSMContext):
    await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—É—á–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    await state.set_state(ArticleStates.choosing_action)

@router.message(F.text.lower() == "‚¨áÔ∏è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é")
async def ingest_prompt(msg: Message, state: FSMContext):
    await msg.answer("üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é —Å arXiv:")
    await state.set_state(ArticleStates.entering_url)

@router.message(ArticleStates.entering_url)
async def ingest_article_handler(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    wait_msg = await msg.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
    result = ingest_article(user_id, msg.text)
    await wait_msg.delete()
    await msg.answer(f"‚úÖ {result.get('message')}")
    await state.set_state(ArticleStates.choosing_action)


@router.message(F.text.lower() == "üìä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
async def summarize_handler(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    wait_msg = await msg.answer("üß† –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –≥–æ—Ç–æ–≤–ª—é –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å—Ç–∞—Ç—å–∏...")
    result = summarize(user_id)
    await wait_msg.delete()
    if "error" in result:
        await msg.answer(result["error"])
    else:
        await msg.answer(
            f"üåê <b>{result['title']}</b>\n\n<b>–†–µ–∑—é–º–µ:</b>\n{result['summary']}",
            parse_mode="HTML"
        )
    await state.set_state(ArticleStates.choosing_action)


@router.message(F.text.lower() == "‚ùì –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_prompt(msg: Message, state: FSMContext):
    await msg.answer("üìù –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∞—Ç—å–µ:")
    await state.set_state(ArticleStates.asking_question)

@router.message(ArticleStates.asking_question)
async def ask_handler(msg: Message, state: FSMContext):
    user_id = str(msg.from_user.id)
    wait_msg = await msg.answer("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
    result = ask(user_id, msg.text)
    await wait_msg.delete()
    if "error" in result:
        await msg.answer(result["error"])
    else:
        await msg.answer(f"üí¨ <b>–û—Ç–≤–µ—Ç:</b>\n{result['answer']}", parse_mode="HTML")
    await state.set_state(ArticleStates.choosing_action)